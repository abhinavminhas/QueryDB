#CI/MANUAL TRIGGER
name: Build

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Build_DotNetCore-OS:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04, macOS-12 ]
        dotnet-version: [ '3.1.x', '6.0.x' ]
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Dotnet Version (${{ matrix.dotnet-version }})
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Build
      run: dotnet build QueryDB.Core.Tests/QueryDB.Core.Tests.csproj --configuration Release

    - name: Docker Compose (Pull)
      if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.dotnet-version == '3.1.x') }}
      run: docker compose -f docker-compose.yml pull --parallel

    - name: Docker Compose (Start - DB Containers)
      if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.dotnet-version == '3.1.x') }}
      run: docker compose -f docker-compose.yml up -d

    - name: Docker Inspect (Wait Status -> Healthy)
      if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.dotnet-version == '3.1.x') }}
      shell: pwsh
      run: |
        # Script (Wait Status -> Healthy)
        $msSQLHealth=""
        $sqlServerHealth=""
        $oracleHealth=""
        $status="healthy"
        $allHealthy=$false
        $retry=1
        do {
                $msSQLHealth = (docker inspect --format="{{json .State.Health.Status}}" mysql-db).Replace('"', '')
                $sqlServerHealth = (docker inspect --format="{{json .State.Health.Status}}" sql-server-db).Replace('"', '')
                $oracleHealth = (docker inspect --format="{{json .State.Health.Status}}" oracle-db).Replace('"', '')
                if (($msSQLHealth -ne $status) -or ($sqlServerHealth -ne $status) -or ($oracleHealth -ne $status)) {
                    write-host "msSQLHealth ==> $msSQLHealth : $status"
                    write-host "sqlServerHealth ==> $sqlServerHealth : $status"
                    write-host "oracleHealth ==> $oracleHealth : $status"
                    Start-Sleep -Seconds 10
                    $retry ++
                } else {
                    $allHealthy=$true
                    break
                }
                write-host "==> $allHealthy"
        } while ($retry -le 6)
        if ($allHealthy -eq $true) {
            Write-Host "1. mysql-db (Status) - $msSQLHealth"
            Write-Host "2. sql-server-db (Status) - $sqlServerHealth"
            Write-Host "3. oracle-db (Status) - $oracleHealth"
        } else {
            Write-Host "1. mysql-db (Status) - $msSQLHealth"
            Write-Host "2. sql-server-db (Status) - $sqlServerHealth"
            Write-Host "3. oracle-db (Status) - $oracleHealth"
            # exit 1
        }
    
    - name: Test
      if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.dotnet-version == '3.1.x') }}
      run: dotnet test --no-build --verbosity normal --configuration Release --filter TestCategory=DB-TESTS
    
    - name: Docker Compose (Tear Down - DB Containers)
      if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.dotnet-version == '3.1.x') }}
      continue-on-error: true
      run: docker compose -f docker-compose.yml down
